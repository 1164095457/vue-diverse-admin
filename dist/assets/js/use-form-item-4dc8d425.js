import{ab as I,W as f,aR as m,p as l,u as h,V as y,O as d,b as t,D as j,B as N,aQ as _,aS as b}from"./index-e27f3969.js";import{a as D,f as E}from"./use-form-common-props-fc5c4daa.js";const c={prefix:Math.floor(Math.random()*1e4),current:0},K=Symbol("elIdInjection"),R=()=>y()?d(K,c):c,g=n=>{const e=R();!I&&e===c&&f("IdInjection",`Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed
usage: app.provide(ID_INJECTION_KEY, {
  prefix: number,
  current: number,
})`);const s=m();return l(()=>h(n)||`${s.value}-id-${e.prefix}-${e.current++}`)},O=()=>{const n=d(D,void 0),e=d(E,void 0);return{form:n,formItem:e}},$=(n,{formItemContext:e,disableIdGeneration:s,disableIdManagement:r})=>{s||(s=t(!1)),r||(r=t(!1));const u=t();let i;const p=l(()=>{var o;return!!(!n.label&&e&&e.inputIds&&((o=e.inputIds)==null?void 0:o.length)<=1)});return j(()=>{i=N([_(n,"id"),s],([o,v])=>{const a=o??(v?void 0:g().value);a!==u.value&&(e!=null&&e.removeInputId&&(u.value&&e.removeInputId(u.value),!(r!=null&&r.value)&&!v&&a&&e.addInputId(a)),u.value=a)},{immediate:!0})}),b(()=>{i&&i(),e!=null&&e.removeInputId&&u.value&&e.removeInputId(u.value)}),{isLabeledByFormItem:p,inputId:u}};export{O as a,$ as b,R as c,g as u};
